module Dummy
  module Generators    
    class UrlsGenerator < Rails::Generators::Base
      include Dummy::Generators::Common
            
      def self.source_root
        @source_root ||= File.expand_path("../templates", __FILE__)
      end
      
      class_option :divisor, :type => :numeric, :default => 10,
                  :desc => "The divisor to use when determining the amount of urls to generate."
      class_option :manual_amounts, :type => :boolean, :default => false,
                  :desc => "Manually set the amount of urls to generate for each model."
      class_option :output_folder, :type => :string, :default => "test/dummy",
                  :desc => "Dummy output folder, urls/ will be used when storing the resulting YAML files."      

      def install_dummy_urls
        initialize_application
        generate_dummy_urls
        copy_rake_files
        update_dummyfile
      end
      
    private

      def initialize_application
        require File.expand_path("#{Rails.root}/config/environment.rb")
        say_status :successful, "initialize Rails application"
      end
      
      def generate_dummy_urls
        get_table_names
        load_dummyfile
        predict_url_amounts
        gather_associations
      end
      
      def get_table_names
        @models = Hash.new
        Dir["app/models/*.rb"].each do |full_path|
          model = File.basename(full_path).chomp(File.extname(full_path)).camelcase.constantize
          @models.merge!({model => {
            :record_amount => 0, :url_amount => 0, :associations => []
          }}) if model.respond_to?(:columns)
        end
      end
      
      def load_dummyfile
        begin
          records = YAML.load_file "#{options.output_folder}/Dummyfile"
        rescue
          raise MissingDummyfile, "Could not find the Dummyfile. Did you forget to generate dummy data or specified a different directory?"
        end
        
        records.each do |record, amount|
          model = record.singularize.camelcase.constantize
          @models[model][:record_amount] = amount[:records]
        end        
      end
      
      def predict_url_amounts
        @models.each do |model, data|
          amount = data[:record_amount] / options.divisor
          
          if options.manual_amounts
            user_defined = ask("Number of urls for #{model} (default: #{amount}): ")
            amount = user_defined unless user_defined.empty?
          end
          
          @models[model][:url_amount] = amount.to_i
        end
      end
      
      def copy_rake_files
        empty_directory "test/dummy/urls"
        @models.each do |model, info|
          @generated_ids = Array.new
          
          @model_name = model.to_s.underscore.pluralize
          @url_amount = info[:url_amount]
          template "model.yml", "#{options.output_folder}/urls/#{@model_name}.yml"
        end
      end
      
      def generate_id(model_name)
        model = model_name.singularize.camelcase.constantize
        
        begin
          yaml_id = rand(@models[model][:record_amount])
        end while @generated_ids.include?(yaml_id)
        @generated_ids.push(yaml_id)
        
        Fixtures.identify("#{model_name.singularize}_#{yaml_id}")
      end
      
      def generate_data(model_name)
        data = Hash.new
        key_value = Hash.new
        model = model_name.singularize.camelcase.constantize
        
        model.columns.each do |column|
          name = model.to_s.underscore
          info = @models[model]
          
          key_value = generate_record_data(name, info, column, false)
          data.merge!(key_value) unless key_value.nil?
        end
        
        data
      end
      
      def update_dummyfile
        data = Hash.new
        dummyfile_path = "#{options.output_folder}/Dummyfile"
        
        @models.each do |model, info|
          data[model.to_s.underscore.pluralize] = {:records => info[:record_amount],
                                                  :urls => info[:url_amount]}
        end
        
        content = "# This file was automatically generated by Dummy. Do NOT change it.\n"        
        content << YAML.dump(data)
        
        remove_file dummyfile_path, :verbose => false if File.exists?(dummyfile_path)
        create_file dummyfile_path, content
      end
    end
  end
end

